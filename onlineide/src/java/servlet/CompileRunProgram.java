/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package servlet;

import java.io.*;
import java.lang.*;
import java.sql.*;
import java.util.Date;
import java.text.SimpleDateFormat;

/**
 *
 * @author Administrator
 */
public class CompileRunProgram {
    int programId=0;

   /*this method compiles the program having name 'name' and user_id userId.
       if user is not registered then userId is 0.
       returns any error in the program or returns 'No error'.
    */

   public String compile(String path,String filename,String saved)
   {
       String error="";
       
       
       if(saved.equals("false"))
       {
             error="You must save your program before compiling.";
             return error;
       }
             
       //checks the presence of '.java' and append it if it doesn't exist.
       int x=filename.indexOf(".java");
       if(x==-1)
             filename=filename+".java";
       filename=path+"/"+filename;
       try
       {
             //obtains an instance of Runtime class.
             Runtime rt=Runtime.getRuntime();
             //creates the process which compiles the program.
             Process p=rt.exec("javac -classpath "+path +" " +filename);
             // gets the errorStream of process.
             InputStream err=p.getErrorStream();
             int i;
             while((i=err.read())!=-1)
             {
                  error=error+(char)i;
             }
        } catch(Exception e) { System.out.println(e);}

         //checks if the class file generated exceeds the memory space allowed to user.
         //if yes then it deletes the class file and generates the error.
         
             File fclass=new File(filename.substring(0,filename.length()-5)+".class");
             File folder=new File(path);
             long mem=getFolderLength(folder);
             
         
           //if there is no error then return 'No errors'.
             if(error.equals(""))
                 error="No errors"+"\n"+"Program successfully compiled";
       //if user is not registered then delete the program when virtual system terminates.
       
           if(filename.indexOf(".java")!=-1)
                 filename=filename.substring(0,filename.length()-5);
           File fclas=new File(path+filename+".class");
           fclass.deleteOnExit();
      
            //return the error produced.
             return error;
   }

  /*this method runs the program having name 'name' of user having id userId
     if the user is not registered then userId is 0.
     returns the output generated by the program if no error occurs otherwise returns the error generated.
  */

  public String run(String path,String filename)
  {

      
      String output="";
            
          try
          {
              //filename=path+"/"+filename;
              // removes the string '.java' from name of program if it exists.
               int i=filename.indexOf(".java");
               if(i!=-1)
                   filename=filename.substring(0,i);

               //generates a date instance having format 'yyyy-MM-dd H:mm:ss'.
              Date today=new Date();
              String pattern="yyyy-MM-dd H:mm:ss";
              SimpleDateFormat formatter=new SimpleDateFormat(pattern);
              String date=formatter.format(today);
System.out.println("in runnnnnnnnnnnnnnnnnn"+filename);

             
      
      
      // generates an instance of Runtime class.
      Runtime rt=Runtime.getRuntime();
      //filename=path+"/"+filename;

      //creates a process which runs the program.

           Process p=rt.exec("java -classpath "+path +" " +filename);
           System.out.println("in process--------"+path +" " +filename);
           //creates an object of StreamHandler class that manages the error produced by program.
           StreamHandlerServiceProvider errorStream=new StreamHandlerServiceProvider(p.getErrorStream(),System.err,output);
           errorStream.start();
           System.out.println("in error--------"+path +" " +filename);
           //creates an object of StreamHandler class that manages the output produced by program.
           StreamHandlerServiceProvider outputStream=new StreamHandlerServiceProvider(p.getInputStream(),System.out,output);
           outputStream.start();
           System.out.println("in start--------"+path +" " +filename);
           //waits for thread to complete.
           errorStream.join();
           outputStream.join();
           System.out.println("in join--------"+path +" " +filename);
           //returns any error produced during the execution of program
           output=errorStream.getOutput();
           //if no error is produced then returns the output generated by the program.

           if(output.equals(""))
               output=outputStream.getOutput();
      } catch(Exception e){System.out.println("----------------------"+e);}
      System.out.println("in run output...................."+ output);
      return output;
   }

   // this method returns the size of folder in bytes.
   public long getFolderLength(File f)
   {
         File file[]=f.listFiles();
         if(file==null)
             return 0;
         long total=0;
         int k;
         for(k=0;k<file.length;k++)
         {
                total=total+file[k].length();
         }
         return total;
   }

}
